% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scv_process.R
\name{scv_process}
\alias{scv_process}
\title{Source and Concept Vocabularies}
\usage{
scv_process(
  cohort,
  concept_set,
  omop_or_pcornet,
  domain_tbl = sourceconceptvocabularies::scv_domain_file,
  code_type,
  code_domain,
  jaccard_index = FALSE,
  multi_or_single_site = "single",
  anomaly_or_exploratory = "exploratory",
  p_value = 0.9,
  age_groups = NULL,
  time = FALSE,
  time_span = c("2012-01-01", "2020-01-01"),
  time_period = "year"
)
}
\arguments{
\item{cohort}{\emph{tabular input} | A dataframe with the cohort of patients for your study. Should include the columns:
\itemize{
\item \code{person_id} / \code{patid} | \emph{integer} / \emph{character}
\item \code{start_date} | \emph{date}
\item \code{end_date} | \emph{date}
\item \code{site} | \emph{site}
}}

\item{concept_set}{\emph{tabular input} | for analyses where \code{time = FALSE}, a csv file with the source \strong{OR} cdm codes of interest for the analysis.

\if{html}{\out{<div class="sourceCode">}}\preformatted{               *vector* | for analyses where `time = TRUE`, a vector with up to 5 source **OR** cdm codes of interest for the analysis.
}\if{html}{\out{</div>}}}

\item{omop_or_pcornet}{\emph{string} | Option to run the function using the OMOP or PCORnet CDM as the default CDM}

\item{domain_tbl}{\emph{tabular input} | a csv file that defines the domains where facts should be identified. defaults to the provided
\code{scv_domain_file}, which contains the following fields:
\itemize{
\item \code{domain} | \emph{character} | the CDM table where information for this domain can be found (i.e. drug_exposure)
\item \code{concept_field} | \emph{character} | the column in the CDM table where \code{cdm} codes can be identified (i.e. drug_concept_id or dx)
\item \code{source_concept_field} | \emph{character} |  the column in the CDM table where \code{source} codes can be identified (i.e. drug_source_concept_id or raw_dx)
\item \code{date_field} | \emph{character} | the column in the CDM table that should be used as the default date field for
over time analyses (i.e. drug_exposure_start_date or dx_date)
\item \code{vocabulary_field} | \emph{character} | (PCORnet only) The name of the column in the domain table where the vocabulary type is stored
}}

\item{code_type}{\emph{string} | the type of code that is being used in the analysis, either \code{source} or \code{cdm}}

\item{code_domain}{\emph{string} | the domain where the codes in the concept set should be searched for; must match
a domain defined in \code{domain_tbl}}

\item{jaccard_index}{\emph{boolean} | \strong{FOR \code{scv_ss_anom_cs} ONLY}: a boolean indicating whether a jaccard index
should be computed at the visit level to determine how often two mapped concepts
cooccur; can help identify potential post-coordination for SNOMED concepts}

\item{multi_or_single_site}{\emph{string} | Option to run the function on a single vs multiple sites
\itemize{
\item \code{single} - run the function for a single site
\item \code{multi} - run the function for multiple sites
}}

\item{anomaly_or_exploratory}{\emph{string} | Option to conduct an exploratory or anomaly detection analysis. Exploratory analyses give a high
level summary of the data to examine the fact representation within the cohort. Anomaly detection
analyses are specialized to identify outliers within the cohort.}

\item{p_value}{\emph{numeric} | the p value to be used as a threshold in the multi-site anomaly detection analysis}

\item{age_groups}{\emph{tabular input} | If you would like to stratify the results by age group,  create a table or CSV file with the following
columns and include it as the \code{age_groups} function parameter:
\itemize{
\item \code{min_age} | \emph{integer} |  the minimum age for the group (i.e. 10)
\item \code{max_age} | \emph{integer} |  the maximum age for the group (i.e. 20)
\item \code{group} | \emph{character} |  a string label for the group (i.e. 10-20, Young Adult, etc.)
}

If you would \emph{not} like to stratify by age group, leave the argument as NULL}

\item{time}{\emph{boolean} | a logical that tells the function whether you would like to look at the output over time}

\item{time_span}{\emph{vector - length 2} | when time = TRUE, this argument defines the start and end dates for the time period of interest. should be
formatted as c(start date, end date) in yyyy-mm-dd date format}

\item{time_period}{\emph{string} | when time = TRUE, this argument defines the distance between dates within the specified time period. defaults
to \code{year}, but other time periods such as \code{month} or \code{week} are also acceptable}
}
\value{
a dataframe with counts and proportions for each source -> cdm or cdm -> source mapping
pair for each of the codes provided in \code{concept_set} this output should then be used in
the \code{scv_output} function to generate an appropriate visualization
}
\description{
This is a concept-set testing module that will compute frequency distributions for the usage of either
source-to-concept or concept-to-source concept pairs in order to highlight mapping patterns and impacts
of concept standardization. The user will provide the domain definitions (\code{domain_tbl}) and a concept
set with the concepts of interest (\code{concept_set}). Sample versions of these inputs are included as data
in the package and are accessible with \verb{sourceconceptvocabularies::}. Results can optionally be stratified
by site, age group, and/or time. This function is compatible with both the OMOP and the PCORnet CDMs
based on the user's selection.
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'sourceconceptvocabularies'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'csv_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'sourceconceptvocabularies'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000),
                #RSQLite does not store date objects,
                #hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Prepare input tables
scv_domain_tbl <- dplyr::tibble(domain = 'condition_occurrence',
                                concept_field = 'condition_concept_id',
                                source_concept_field =
                                  'condition_source_concept_id',
                                date_field = 'condition_start_date',
                                vocabulary_field = NA)

scv_concept_set <- read_codeset('dx_hypertension')

#' Execute `scv_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
scv_process_example <- scv_process(cohort = cohort,
                                   multi_or_single_site = 'single',
                                   anomaly_or_exploratory = 'exploratory',
                                   time = FALSE,
                                   omop_or_pcornet = 'omop',
                                   code_type = 'cdm',
                                   code_domain = 'condition_occurrence',
                                   domain_tbl = scv_domain_tbl,
                                   concept_set = scv_concept_set)

scv_process_example

#' Execute `scv_output` function
scv_output_example <- scv_output(process_output = scv_process_example,
                                 code_type = 'cdm',
                                 vocab_tbl = NULL)

scv_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_squba()`

make_interactive_squba(scv_output_example[[1]])
}
