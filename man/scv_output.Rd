% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scv_output.R
\name{scv_output}
\alias{scv_output}
\title{Source and Concept Vocabularies -- Output Generation}
\usage{
scv_output(
  process_output,
  code_type,
  filter_concept = NULL,
  filter_mapped = NULL,
  num_codes = 10,
  num_mappings = 25,
  vocab_tbl = NULL
)
}
\arguments{
\item{process_output}{\emph{tabular input} | the output of the \code{scv_process} function}

\item{code_type}{\emph{string} | the type of code that is being used in the analysis, either \code{source} or \code{cdm};
should match the code_type that was defined when running \code{scv_process}}

\item{filter_concept}{\emph{(integer or string) or vector} | choose concept from the concept_set provided in
\code{scv_process} to filter the output; used for all inputs EXCEPT \code{ss_exp_cs}, \code{ss_exp_la},
and \code{ss_anom_cs} (when jaccard_index is FALSE)}

\item{filter_mapped}{\emph{(integer or string) or vector} | choose mapped concept from those associated with the
concept_id provided in \code{filter_concept}; options can be found in the \code{source_concept_id} column
of \code{scv_process}; used for \code{ms_anom_la}}

\item{num_codes}{\emph{integer} | the number of top codes of code_type that should be displayed in the analysis

\if{html}{\out{<div class="sourceCode">}}\preformatted{             used for `ss_exp_cs` and `ss_anom_cs`
}\if{html}{\out{</div>}}}

\item{num_mappings}{\emph{integer} | the number of top mappings that should be displayed for each code of code_type

\if{html}{\out{<div class="sourceCode">}}\preformatted{                used for `ss_exp_cs`, `ss_exp_la`, `ms_exp_la`, `ss_anom_cs`, `ms_anom_cs`
}\if{html}{\out{</div>}}}

\item{vocab_tbl}{\emph{tabular input} | OPTIONAL: the location of an external vocabulary table containing concept names for
the provided codes. if not NULL, concept names will be available in either a reference
table or in a hover tooltip}
}
\value{
a graph to visualize the results from \code{scv_process} based on the parameters provided

\if{html}{\out{<div class="sourceCode">}}\preformatted{    in some cases, an additional reference table with summary information about the codes
    included in the graph
}\if{html}{\out{</div>}}
}
\description{
Using the tabular output generated by \code{scv_process}, this function will build a graph to
visualize the results. Each function configuration will output a bespoke ggplot. Theming can
be adjusted by the user after the graph has been output using \code{+ theme()}. Most graphs can
also be made interactive using \code{make_interactive_squba()}
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'sourceconceptvocabularies'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'csv_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'sourceconceptvocabularies'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000),
                #RSQLite does not store date objects,
                #hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Prepare input tables
scv_domain_tbl <- dplyr::tibble(domain = 'condition_occurrence',
                                concept_field = 'condition_concept_id',
                                source_concept_field =
                                  'condition_source_concept_id',
                                date_field = 'condition_start_date',
                                vocabulary_field = NA)

scv_concept_set <- read_codeset('dx_hypertension')

#' Execute `scv_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
scv_process_example <- scv_process(cohort = cohort,
                                   multi_or_single_site = 'single',
                                   anomaly_or_exploratory = 'exploratory',
                                   time = FALSE,
                                   omop_or_pcornet = 'omop',
                                   code_type = 'cdm',
                                   code_domain = 'condition_occurrence',
                                   domain_tbl = scv_domain_tbl,
                                   concept_set = scv_concept_set)

scv_process_example

#' Execute `scv_output` function
scv_output_example <- scv_output(process_output = scv_process_example,
                                 code_type = 'cdm',
                                 vocab_tbl = NULL)

scv_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_squba()`

make_interactive_squba(scv_output_example[[1]])
}
